#Implement the concept of image denoising using autoencoders on MNIST data set 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers
file = "Dataset/NEW/3 MNIST/mnist_784_csv.csv"
data = pd.read_csv(file)
data.head()

x = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

x = np.reshape(x, (len(x), 28, 28, 1))

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

def add_noise(images):
    noise_factor = 0.5
    noisy_images = images + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=images.shape)
    noisy_images = np.clip(noisy_images, 0., 1.)
    return noisy_images
x_train_noisy = add_noise(x_train)
x_test_noisy  = add_noise(x_test)


# autoencoder model
autoencoder = keras.models.Sequential([
    layers.Input(shape=(28, 28, 1)),
    layers.Conv2D(16, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D((2, 2), padding='same'),
    layers.Conv2D(8, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D((2, 2), padding='same'),
    layers.Conv2D(8, (3,3 ), activation='relu', padding='same'),
    layers.UpSampling2D((2, 2)),
    layers.Conv2D(16, (3, 3), activation='relu', padding='same'),
    layers.UpSampling2D((2, 2)),
    layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same')
])


# Compile the autoencoder
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')


# Fit the model using noisy images as input
history = autoencoder.fit(x_train_noisy, x_train,
                          epochs=50, 
                          batch_size=256,
                          shuffle=True,
                          validation_data=(x_test_noisy, x_test))



loss = autoencoder.evaluate(x_test_noisy, x_test)
print(loss)


denoised_images = autoencoder.predict(x_test_noisy)
def display(original, noisy, denoised, n=10):
    plt.figure(figsize=(20, 6))
    
    for i in range(n):
        ax = plt.subplot(3, n, i+1)
        plt.imshow(original[i].reshape(28, 28), cmap='gray')
        plt.title("Original")
        plt.axis("off")

        ax = plt.subplot(3, n, i+1+n)
        plt.imshow(noisy[i].reshape(28, 28), cmap='gray')
        plt.title("Noisy")
        plt.axis("off")

        ax = plt.subplot(3, n, i+1+2*n)
        plt.imshow(denoised[i].reshape(28, 28), cmap='gray')
        plt.title("Denoised")
        plt.axis("off")
        
    plt.show()


display(x_test, x_test_noisy, denoised_images)
